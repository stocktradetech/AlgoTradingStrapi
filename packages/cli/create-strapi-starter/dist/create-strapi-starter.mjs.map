{"version":3,"file":"create-strapi-starter.mjs","sources":["../src/utils/has-yarn.ts","../src/utils/logger.ts","../src/utils/child-process.ts","../src/utils/stop-process.ts","../src/utils/fetch-npm-starter.ts","../src/utils/build-starter.ts","../src/utils/prompt-user.ts","../src/create-strapi-starter.ts"],"sourcesContent":["import execa from 'execa';\n\nexport default function hasYarn() {\n  try {\n    const { exitCode } = execa.commandSync('yarn --version', { shell: true });\n\n    if (exitCode === 0) return true;\n  } catch (err) {\n    return false;\n  }\n}\n","import chalk from 'chalk';\n\nexport default {\n  error(message: string) {\n    console.error(`${chalk.red('error')}: ${message}`);\n  },\n\n  warn(message: string) {\n    console.log(`${chalk.yellow('warning')}: ${message}`);\n  },\n\n  info(message: string) {\n    console.log(`${chalk.blue('info')}: ${message}`);\n  },\n};\n","import { execSync } from 'child_process';\nimport execa from 'execa';\nimport logger from './logger';\nimport type { Options } from '../types';\n\nexport function runInstall(path: string, { useYarn }: Options = {}) {\n  return execa(useYarn ? 'yarn' : 'npm', ['install'], {\n    cwd: path,\n    stdin: 'ignore',\n  });\n}\nexport function runApp(rootPath: string, { useYarn }: Options = {}) {\n  if (useYarn) {\n    return execa('yarn', ['develop'], {\n      stdio: 'inherit',\n      cwd: rootPath,\n    });\n  }\n\n  return execa('npm', ['run', 'develop'], {\n    stdio: 'inherit',\n    cwd: rootPath,\n  });\n}\n\nexport async function initGit(rootPath: string) {\n  try {\n    await execa('git', ['init'], {\n      cwd: rootPath,\n    });\n  } catch (err) {\n    logger.warn('Could not initialize a git repository');\n  }\n\n  try {\n    await execa('git', ['add', '-A'], { cwd: rootPath });\n\n    execSync('git commit -m \"Create Strapi starter project\"', {\n      cwd: rootPath,\n    });\n  } catch (err) {\n    logger.warn('Could not create initial git commit');\n  }\n}\n","import logger from './logger';\n\nexport default function stopProcess(message: string) {\n  if (message) {\n    logger.error(message);\n  }\n\n  return process.exit(1);\n}\n","import path from 'path';\nimport execa from 'execa';\nimport chalk from 'chalk';\nimport stopProcess from './stop-process';\nimport type { Options, PackageInfo } from '../types';\n\n/**\n * Gets the package version on npm. Will fail if the package does not exist\n */\nasync function getPackageInfo(packageName: string, options?: Options): Promise<PackageInfo> {\n  const { useYarn } = options ?? {};\n\n  // Use yarn if possible because it's faster\n  if (useYarn) {\n    const { stdout } = await execa('yarn', ['info', packageName, '--json']);\n    const yarnInfo = JSON.parse(stdout);\n    return {\n      name: yarnInfo.data.name,\n      version: yarnInfo.data.version,\n    };\n  }\n\n  // Fallback to npm\n  const { stdout } = await execa('npm', ['view', packageName, 'name', 'version', '--silent']);\n  // Use regex to parse name and version from CLI result\n  const match = stdout.match(/(?<=')(.*?)(?=')/gm);\n\n  if (!match) {\n    throw new Error('No match for name@version');\n  }\n\n  const [name, version] = match;\n  return { name, version };\n}\n\n/**\n * Get the version and full package name of the starter\n */\nexport async function getStarterPackageInfo(\n  starter: string,\n  options?: Options\n): Promise<PackageInfo> {\n  const { useYarn } = options ?? {};\n\n  // Check if starter is a shorthand\n  try {\n    const longhand = `@strapi/starter-${starter}`;\n    return await getPackageInfo(longhand, { useYarn });\n  } catch (error) {\n    // Ignore error, we now know it's not a shorthand\n  }\n  // Fetch version of the non-shorthand package\n  try {\n    return await getPackageInfo(starter, { useYarn });\n  } catch (error) {\n    return stopProcess(`Could not find package ${chalk.yellow(starter)} on npm`);\n  }\n}\n\n/**\n * Download a starter package from the npm registry\n */\nexport async function downloadNpmStarter(\n  packageInfo: PackageInfo,\n  parentDir: string,\n  options?: Options\n): Promise<string> {\n  const { name, version } = packageInfo;\n  const { useYarn } = options ?? {};\n\n  // Download from npm, using yarn if possible\n  if (useYarn) {\n    await execa('yarn', ['add', `${name}@${version}`, '--no-lockfile', '--silent'], {\n      cwd: parentDir,\n    });\n  } else {\n    await execa('npm', ['install', `${name}@${version}`, '--no-save', '--silent'], {\n      cwd: parentDir,\n    });\n  }\n\n  // Return the path of the actual starter\n  const exactStarterPath = path.dirname(\n    require.resolve(`${name}/package.json`, { paths: [parentDir] })\n  );\n  return exactStarterPath;\n}\n","import { resolve, join, basename } from 'path';\nimport os from 'os';\nimport fse from 'fs-extra';\nimport ora from 'ora';\nimport ciEnv from 'ci-info';\nimport chalk from 'chalk';\n\nimport { generateNewApp } from '@strapi/generate-new';\n\nimport hasYarn from './has-yarn';\nimport { runInstall, runApp, initGit } from './child-process';\nimport { getStarterPackageInfo, downloadNpmStarter } from './fetch-npm-starter';\nimport logger from './logger';\nimport stopProcess from './stop-process';\nimport type { Options, PackageInfo, Program } from '../types';\n\nfunction readStarterJson(filePath: string, starter: string) {\n  try {\n    const data = fse.readFileSync(filePath);\n    return JSON.parse(data.toString());\n  } catch (err) {\n    stopProcess(`Could not find ${chalk.yellow('starter.json')} in ${chalk.yellow(starter)}`);\n  }\n}\n\nasync function initPackageJson(rootPath: string, projectName: string, { useYarn }: Options = {}) {\n  const packageManager = useYarn ? 'yarn --cwd' : 'npm run --prefix';\n\n  try {\n    await fse.writeJson(\n      join(rootPath, 'package.json'),\n      {\n        name: projectName,\n        private: true,\n        version: '0.0.0',\n        scripts: {\n          'develop:backend': `${packageManager} backend develop`,\n          'develop:frontend': `wait-on http://localhost:1337/admin && ${packageManager} frontend develop`,\n          develop: 'cross-env FORCE_COLOR=1 npm-run-all -l -p develop:*',\n        },\n        devDependencies: {\n          'npm-run-all': '4.1.5',\n          'wait-on': '5.2.1',\n          'cross-env': '7.0.3',\n        },\n      },\n      {\n        spaces: 2,\n      }\n    );\n  } catch (err) {\n    stopProcess(`Failed to create ${chalk.yellow('package.json')} in ${chalk.yellow(rootPath)}`);\n  }\n}\n\nasync function installWithLogs(path: string, options: Options) {\n  const installPrefix = chalk.yellow('Installing dependencies:');\n  const loader = ora(installPrefix).start();\n  const logInstall = (chunk = '') => {\n    loader.text = `${installPrefix} ${chunk.toString().split('\\n').join(' ')}`;\n  };\n\n  const runner = runInstall(path, options);\n  runner.stdout?.on('data', logInstall);\n  runner.stderr?.on('data', logInstall);\n\n  await runner;\n\n  loader.stop();\n  console.log(`Dependencies installed ${chalk.green('successfully')}.`);\n}\n\nasync function getStarterInfo(starter: string, { useYarn }: Options = {}) {\n  const isLocalStarter = ['./', '../', '/'].some((filePrefix) => starter.startsWith(filePrefix));\n\n  let starterPath;\n  let starterParentPath;\n  let starterPackageInfo: PackageInfo | undefined;\n\n  if (isLocalStarter) {\n    // Starter is a local directory\n    console.log('Installing local starter.');\n    starterPath = resolve(starter);\n  } else {\n    // Starter should be an npm package. Fetch starter info\n    starterPackageInfo = await getStarterPackageInfo(starter, { useYarn });\n    console.log(`Installing ${chalk.yellow(starterPackageInfo.name)} starter.`);\n\n    // Download starter repository to a temporary directory\n    starterParentPath = await fse.mkdtemp(join(os.tmpdir(), 'strapi-'));\n    starterPath = await downloadNpmStarter(starterPackageInfo, starterParentPath, { useYarn });\n  }\n\n  return { isLocalStarter, starterPath, starterParentPath, starterPackageInfo };\n}\n\n/**\n * @param {Object} projectArgs - The arguments for create a project\n * @param {string|null} projectArgs.projectName - The name/path of project\n * @param {string|null} projectArgs.starter - The npm package of the starter\n * @param {Object} program - Commands for generating new application\n */\nexport default async function buildStarter(\n  { projectName, starter }: { projectName: string; starter: string },\n  program: Program\n) {\n  const hasYarnInstalled = hasYarn();\n  const { isLocalStarter, starterPath, starterParentPath, starterPackageInfo } =\n    await getStarterInfo(starter, { useYarn: hasYarnInstalled });\n\n  // Project directory\n  const rootPath = resolve(projectName);\n  const projectBasename = basename(rootPath);\n  const starterJson = readStarterJson(join(starterPath, 'starter.json'), starter);\n\n  try {\n    await fse.ensureDir(rootPath);\n  } catch (error) {\n    if (error instanceof Error) {\n      stopProcess(`Failed to create ${chalk.yellow(rootPath)}: ${error.message}`);\n    }\n\n    stopProcess(`Failed to create ${chalk.yellow(rootPath)}: ${error}`);\n  }\n\n  // Copy the downloaded frontend folder to the project folder\n  const frontendPath = join(rootPath, 'frontend');\n\n  try {\n    await fse.copy(join(starterPath, 'starter'), frontendPath, {\n      overwrite: true,\n      recursive: true,\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      stopProcess(`Failed to create ${chalk.yellow(frontendPath)}: ${error.message}`);\n    }\n\n    stopProcess(`Failed to create ${chalk.yellow(frontendPath)}`);\n  }\n\n  // Delete the starter directory if it was downloaded\n  if (!isLocalStarter && starterParentPath) {\n    await fse.remove(starterParentPath);\n  }\n\n  // Set command options for Strapi app\n  const generateStrapiAppOptions = {\n    ...program,\n    starter: starterPackageInfo?.name,\n    run: false,\n  };\n  if (starterJson.template.version) {\n    generateStrapiAppOptions.template = `${starterJson.template.name}@${starterJson.template.version}`;\n  } else {\n    generateStrapiAppOptions.template = starterJson.template.name;\n  }\n\n  // Create strapi app using the template\n  await generateNewApp(join(rootPath, 'backend'), generateStrapiAppOptions);\n\n  // Install frontend dependencies\n  console.log(`Creating Strapi starter frontend at ${chalk.yellow(frontendPath)}.`);\n  console.log('Installing frontend dependencies');\n  await installWithLogs(frontendPath, { useYarn: hasYarnInstalled });\n\n  // Setup monorepo\n  initPackageJson(rootPath, projectBasename, { useYarn: hasYarnInstalled });\n\n  // Add gitignore\n  try {\n    const gitignore = join(__dirname, '..', 'resources', 'gitignore');\n    await fse.copy(gitignore, join(rootPath, '.gitignore'));\n  } catch (err) {\n    logger.warn(`Failed to create file: ${chalk.yellow('.gitignore')}`);\n  }\n\n  await installWithLogs(rootPath, { useYarn: hasYarnInstalled });\n\n  if (!ciEnv.isCI) {\n    await initGit(rootPath);\n  }\n\n  console.log(chalk.green('Starting the app'));\n  await runApp(rootPath, { useYarn: hasYarnInstalled });\n}\n","import inquirer from 'inquirer';\nimport type { Program } from '../types';\n\ninterface Answers {\n  directory: string;\n  quick: boolean;\n  starter: string;\n}\n\n// Prompts the user with required questions to create the project and return the answers\nexport default async function promptUser(projectName: string, starter: string, program: Program) {\n  const questions: ReadonlyArray<inquirer.DistinctQuestion<Answers>> = [\n    {\n      type: 'input',\n      default: 'my-strapi-project',\n      name: 'directory',\n      message: 'What would you like to name your project?',\n      when: !projectName,\n    },\n    {\n      type: 'list',\n      name: 'quick',\n      message: 'Choose your installation type',\n      when: !program.quickstart,\n      choices: [\n        {\n          name: 'Quickstart (recommended)',\n          value: true,\n        },\n        {\n          name: 'Custom (manual settings)',\n          value: false,\n        },\n      ],\n    },\n    {\n      type: 'input',\n      name: 'starter',\n      when: !starter,\n      message: 'Please provide the npm package name of the starter you want to use:',\n    },\n  ];\n\n  return inquirer.prompt<Answers>(questions);\n}\n","import { readFileSync } from 'node:fs';\nimport { resolve } from 'node:path';\n\nimport commander, { CommanderError } from 'commander';\n\nimport buildStarter from './utils/build-starter';\nimport promptUser from './utils/prompt-user';\nimport type { Program } from './types';\n\ninterface ProjectArgs {\n  projectName: string;\n  starter: string;\n}\n\nconst packageJson = JSON.parse(readFileSync(resolve(__dirname, '../package.json'), 'utf8'));\n\nconst program = new commander.Command(packageJson.name);\n\nconst incompatibleQuickstartOptions: Array<keyof Program> = [\n  'dbclient',\n  'dbhost',\n  'dbport',\n  'dbname',\n  'dbusername',\n  'dbpassword',\n  'dbssl',\n  'dbfile',\n];\n\nprogram\n  .version(packageJson.version)\n  .arguments('[directory], [starter]')\n  .option('--use-npm', 'Force usage of npm instead of yarn to create the project')\n  .option('--debug', 'Display database connection error')\n  .option('--quickstart', 'Quickstart app creation')\n  .option('--dbclient <dbclient>', 'Database client')\n  .option('--dbhost <dbhost>', 'Database host')\n  .option('--dbport <dbport>', 'Database port')\n  .option('--dbname <dbname>', 'Database name')\n  .option('--dbusername <dbusername>', 'Database username')\n  .option('--dbpassword <dbpassword>', 'Database password')\n  .option('--dbssl <dbssl>', 'Database SSL')\n  .option('--dbfile <dbfile>', 'Database file path for sqlite')\n  .option('--dbforce', 'Overwrite database content if any')\n  .description(\n    'Create a fullstack monorepo application using the strapi backend template specified in the provided starter'\n  )\n  .action((directory, starter, programArgs) => {\n    const projectArgs: ProjectArgs = { projectName: directory, starter };\n\n    initProject(projectArgs, programArgs);\n  });\n\nfunction generateApp(projectArgs: ProjectArgs, programArgs: Program) {\n  if (!projectArgs.projectName || !projectArgs.starter) {\n    console.error(\n      'Please specify the <directory> and <starter> of your project when using --quickstart'\n    );\n    // eslint-disable-next-line no-process-exit\n    process.exit(1);\n  }\n\n  return buildStarter(projectArgs, programArgs);\n}\n\nasync function initProject(projectArgs: ProjectArgs, programArgs: Program) {\n  const hasIncompatibleQuickstartOptions = incompatibleQuickstartOptions.some(\n    (opt) => programArgs[opt]\n  );\n\n  if (programArgs.quickstart && hasIncompatibleQuickstartOptions) {\n    console.error(\n      `The quickstart option is incompatible with the following options: ${incompatibleQuickstartOptions.join(\n        ', '\n      )}`\n    );\n    process.exit(1);\n  }\n\n  if (hasIncompatibleQuickstartOptions) {\n    programArgs.quickstart = false; // Will disable the quickstart question because != 'undefined'\n  }\n\n  const { projectName, starter } = projectArgs;\n\n  if (programArgs.quickstart) {\n    return generateApp(projectArgs, programArgs);\n  }\n\n  const prompt = await promptUser(projectName, starter, programArgs);\n\n  const promptProjectArgs = {\n    projectName: prompt.directory || projectName,\n    starter: prompt.starter || starter,\n  };\n\n  return generateApp(promptProjectArgs, {\n    ...programArgs,\n    quickstart: prompt.quick || programArgs.quickstart,\n  });\n}\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  if (err instanceof CommanderError) {\n    if (err.exitCode && err.exitCode !== 0) {\n      program.outputHelp();\n    }\n  }\n}\n"],"names":["path","stdout","program","resolve"],"mappings":"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"}