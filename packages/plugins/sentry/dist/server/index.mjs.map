{"version":3,"file":"index.mjs","sources":["../../server/src/middlewares/sentry.ts","../../server/src/bootstrap.ts","../../server/src/services/sentry.ts","../../server/src/services/index.ts","../../server/src/config.ts","../../server/src/index.ts"],"sourcesContent":["import type { Strapi } from '@strapi/strapi';\nimport type Sentry from '@sentry/node';\nimport type createSentryService from '../services/sentry';\n\n/**\n * Programmatic sentry middleware. We do not want to expose it in the plugin\n */\nexport default ({ strapi }: { strapi: Strapi }) => {\n  const sentryService: ReturnType<typeof createSentryService> = strapi\n    .plugin('sentry')\n    .service('sentry');\n  sentryService.init();\n  const sentry = sentryService.getInstance();\n\n  if (!sentry) {\n    // initialization failed\n    return;\n  }\n\n  strapi.server.use(async (ctx, next) => {\n    try {\n      await next();\n    } catch (error) {\n      if (error instanceof Error) {\n        sentryService.sendError(error, (scope: Sentry.Scope) => {\n          scope.addEventProcessor((event) => {\n            // Parse Koa context to add error metadata\n            return sentry.Handlers.parseRequest(event, ctx.request as Sentry.Request, {\n              // Don't parse the transaction name, we'll do it manually\n              transaction: false,\n            });\n          });\n\n          // Manually add transaction name\n          scope.setTag('transaction', `${ctx.method} ${ctx._matchedRoute}`);\n          // Manually add Strapi version\n          scope.setTag('strapi_version', strapi.config.info.strapi);\n          scope.setTag('method', ctx.method);\n        });\n      }\n\n      throw error;\n    }\n  });\n};\n","import type { Strapi } from '@strapi/strapi';\nimport initSentryMiddleware from './middlewares/sentry';\n\nexport default async ({ strapi }: { strapi: Strapi }) => {\n  // Initialize the Sentry service exposed by this plugin\n  initSentryMiddleware({ strapi });\n};\n","import type { Strapi } from '@strapi/strapi';\nimport type { Config } from 'src/config';\nimport * as Sentry from '@sentry/node';\n\nconst createSentryService = (strapi: Strapi) => {\n  let isReady = false;\n  let instance: typeof Sentry | null = null;\n\n  // Retrieve user config and merge it with the default one\n  const config = strapi.config.get('plugin.sentry') as Config;\n\n  return {\n    /**\n     * Initialize Sentry service\n     */\n    init() {\n      // Make sure there isn't a Sentry instance already running\n      if (instance != null) {\n        return this;\n      }\n\n      // Don't init Sentry if no DSN was provided\n      if (!config.dsn) {\n        strapi.log.info('@strapi/plugin-sentry is disabled because no Sentry DSN was provided');\n        return this;\n      }\n\n      try {\n        Sentry.init({\n          dsn: config.dsn,\n          environment: strapi.config.get('environment'),\n          ...config.init,\n        });\n\n        // Store the successfully initialized Sentry instance\n        instance = Sentry;\n        isReady = true;\n      } catch (error) {\n        strapi.log.warn('Could not set up Sentry, make sure you entered a valid DSN');\n      }\n\n      return this;\n    },\n\n    /**\n     * Expose Sentry instance through a getter\n     */\n    getInstance() {\n      return instance;\n    },\n\n    /**\n     * Higher level method to send exception events to Sentry\n     */\n    sendError(error: Error, configureScope?: (scope: Sentry.Scope) => void) {\n      // Make sure Sentry is ready\n      if (!isReady || !instance) {\n        strapi.log.warn(\"Sentry wasn't properly initialized, cannot send event\");\n        return;\n      }\n\n      instance.withScope((scope) => {\n        // Configure the Sentry scope using the provided callback\n        if (configureScope && config.sendMetadata) {\n          configureScope(scope);\n        }\n\n        // Actually send the Error to Sentry\n        instance?.captureException(error);\n      });\n    },\n  };\n};\n\nexport default ({ strapi }: { strapi: Strapi }) => createSentryService(strapi);\n","import sentry from './sentry';\n\nexport default {\n  sentry,\n};\n","import type { NodeOptions } from '@sentry/node';\n\nexport interface Config {\n  dsn: string | null;\n  sendMetadata: boolean;\n  init: NodeOptions;\n}\n\nexport default {\n  default: {\n    dsn: null,\n    sendMetadata: true,\n    init: {},\n  } satisfies Config,\n  validator() {},\n};\n","import bootstrap from './bootstrap';\nimport services from './services';\nimport config from './config';\n\nexport default () => ({\n  bootstrap,\n  config,\n  services,\n});\n"],"names":["sentry","config"],"mappings":";AAOA,MAAA,uBAAe,CAAC,EAAE,OAAA,MAAiC;AACjD,QAAM,gBAAwD,OAC3D,OAAO,QAAQ,EACf,QAAQ,QAAQ;AACnB,gBAAc,KAAK;AACb,QAAAA,UAAS,cAAc;AAE7B,MAAI,CAACA,SAAQ;AAEX;AAAA,EACF;AAEA,SAAO,OAAO,IAAI,OAAO,KAAK,SAAS;AACjC,QAAA;AACF,YAAM,KAAK;AAAA,aACJ,OAAO;AACd,UAAI,iBAAiB,OAAO;AACZ,sBAAA,UAAU,OAAO,CAAC,UAAwB;AAChD,gBAAA,kBAAkB,CAAC,UAAU;AAEjC,mBAAOA,QAAO,SAAS,aAAa,OAAO,IAAI,SAA2B;AAAA;AAAA,cAExE,aAAa;AAAA,YAAA,CACd;AAAA,UAAA,CACF;AAGK,gBAAA,OAAO,eAAe,GAAG,IAAI,MAAM,IAAI,IAAI,aAAa,EAAE;AAEhE,gBAAM,OAAO,kBAAkB,OAAO,OAAO,KAAK,MAAM;AAClD,gBAAA,OAAO,UAAU,IAAI,MAAM;AAAA,QAAA,CAClC;AAAA,MACH;AAEM,YAAA;AAAA,IACR;AAAA,EAAA,CACD;AACH;ACzCA,MAAA,YAAe,OAAO,EAAE,OAAA,MAAiC;AAElC,uBAAA,EAAE,QAAQ;AACjC;ACFA,MAAM,sBAAsB,CAAC,WAAmB;AAC9C,MAAI,UAAU;AACd,MAAI,WAAiC;AAGrC,QAAMC,UAAS,OAAO,OAAO,IAAI,eAAe;AAEzC,SAAA;AAAA;AAAA;AAAA;AAAA,IAIL,OAAO;AAEL,UAAI,YAAY,MAAM;AACb,eAAA;AAAA,MACT;AAGI,UAAA,CAACA,QAAO,KAAK;AACR,eAAA,IAAI,KAAK,sEAAsE;AAC/E,eAAA;AAAA,MACT;AAEI,UAAA;AACF,eAAO,KAAK;AAAA,UACV,KAAKA,QAAO;AAAA,UACZ,aAAa,OAAO,OAAO,IAAI,aAAa;AAAA,UAC5C,GAAGA,QAAO;AAAA,QAAA,CACX;AAGU,mBAAA;AACD,kBAAA;AAAA,eACH,OAAO;AACP,eAAA,IAAI,KAAK,4DAA4D;AAAA,MAC9E;AAEO,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,cAAc;AACL,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,UAAU,OAAc,gBAAgD;AAElE,UAAA,CAAC,WAAW,CAAC,UAAU;AAClB,eAAA,IAAI,KAAK,uDAAuD;AACvE;AAAA,MACF;AAES,eAAA,UAAU,CAAC,UAAU;AAExB,YAAA,kBAAkBA,QAAO,cAAc;AACzC,yBAAe,KAAK;AAAA,QACtB;AAGA,kBAAU,iBAAiB,KAAK;AAAA,MAAA,CACjC;AAAA,IACH;AAAA,EAAA;AAEJ;AAEA,MAAe,SAAA,CAAC,EAAE,OAAO,MAA0B,oBAAoB,MAAM;ACxE7E,MAAe,WAAA;AAAA,EACb;AACF;ACIA,MAAe,SAAA;AAAA,EACb,SAAS;AAAA,IACP,KAAK;AAAA,IACL,cAAc;AAAA,IACd,MAAM,CAAC;AAAA,EACT;AAAA,EACA,YAAY;AAAA,EAAC;AACf;ACXA,MAAA,QAAe,OAAO;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACF;"}